
ASP.NET CORE + SIGNALR

4. SignalR nedir ?

Uygulamarýmýza realtime özellik kazandýran bir opensource kütüphanedir.
Websocket teknolojisi.
Websocket --tek bir tcp üzerinden client ve server arasýnda iki yönlü iletiþimi saðlayan protokoldür. Client ve serverin haberleþmesi için belli bir kurallar olmalý.
2011 yýlýnda ortaya çýktý. 2012 de asp.net te çýktý.
RealTime -- client ve server'in anlýk olarak haberleþmesi.--browserda chat uygulamasý.sayfa yenilenmeden meajlaþýlmasý. --açýk artýrma siteleri. --monitoring iþlemi.chart'larýn güncellenmesi.
Sayfa yenilenmeden sayfada datanýn yenilenmesi.
Server'da web tarafýný tetikleme imkaný sunar.
Borsa Uygulamasý, Chat Uygulamasý, Maps, Canlý Dashboard'lar vs vs.

SignalR arka planda 3 teknolojiyi desteklemezse sýrasýyle kullanýr.
WebSockets -çift taraflý iletiþim saðlanmasý. TCP üzerinden iletiþim kuran protokol
Server-Sent Events --Tarayýcý websocket'i desteklemiyorsa server sent events ile çift taraflý iletiþim saðlar.
Long Polling --Server-Sent Events desteklemez ise bunu kullanýr. Server tarafýndan web'e sürekli istek yaparak çift yönlü iletiþimi saðlar.

5. WebSocket Server uygulamasý nasýl geliþtirebiliriz ? SignalR nasýl çalýþýr ?

Asp.Net Core : SignalR
Node.js : Socket.IO
Pyhton : WebSockets

SignalR'ýn merkezinde HUB bir dediðimiz merkezi yapý var. Client ile server arasýndaki haberleþmeyi bu HUB(class) yapar.

Client1 --> IN --> HUB --> OUT --> Client2 Client3 Client4(Bu client'lar HUB 'a subscribe -abone olanlar) --> OUT --> Client1

Anlýk olarak data izlemek, anlýk olarak client'larý bilgilendirmek.


6. SignalR Server uygulamasý inþa etmek

Client           (Server Method)
Client Method	 (Client Method)

						SignalR Server
						Server Method
						Client Method
Client 
Client Method 	 (Client Method)

Client'tan Server'a Server'dan Client'a akýþ oluyor. Server, Client metodunu çalýþtýrabiliyor.

Client server'a istek yapýyor. Server içerisindeki Client Metodu kullanarak ilk önce Client'a çaðrý yapýyor.Client Server'ý çalýþtýrdý. Server Client metodlarýný çalýþtýrdý.



9. SignalR Client Log Mesajlarý

Sorunsuzdan sorunluya daoðru

1.Trace  		--Uygulama hakkýnda genel bilgiler vermkek.
2.Debug  		--Uygulama hakkýnda genel bilgiler vermkek.
3.Information  	--Gerekli bilgiler
4.Warning		--Bir problem var. Ama uygulama hala çalýþýr durumda.
5.Error			--Hata var. lgilen
6.Critical		--Hata var.Uygulamanýn genelinde bir sýkýntýya sebep olabilir.


10. SignalR Client withAutomaticReconnect method

withAutomaticReconnect  --client baðlantýsýný yaptý. Bir nedenden dolayý baðlantý koparsa bu metotla otomatik baðlantý yapmasýný saðlar.

0sn,2sn,10sn,30sn arasý istekler yapar. 30snden sonra baþarýsýzsa baðlantý yapma denemelerini býrakýyor.
onreconnection 	--baðlantý koptunktan sonra 0sn de bu metot event fýrlatýr. Tekrar baðlanýr. Baðlantý koptu, tekrar baðlanýyorum diyebilirsiniz.
onreconntected 		--baðlantý tekrar saðlanýrsa bu event fýrlatýlýr ve baðlantý kuruldu diyebilinebilir.
onclose	-- Baðlantý kurulmazsa bu metot fýrlatýrlýr. Baðlantý tamamen koptu. Sayfanýzý yenilebilirsiniz.

Döngüyede sokulabilir.
onreconnection ve onreconntected birer kez çalýþýr.


12. SignalR Client Otomatik baðlantý

Kullanýcý ilk girdiði anda baðlantý yoksa.


13. SignalR Server Hub virtual methods


OnConnectedAsync		--Baðlantý olduðu zaman, client'lar baðlandýkça. baðlý olan client sayýsý
OnDisconnectedAsync		--Baðlantý koptuðu zaman, client'lar baðlantý koptuðunda


14. SignalR Server IHubContext<>

IHubContext<> --Hub'ýn içerisindeki metotlarý çaðýrabilmek için kullanýlýr.

Controller'da aþaðýdaki taným üzerinden client ile server arasýndaki iletiþimi kurarýz.
private readonly IHubContext<MyHub> _hubContext;

//server tarafýnda client'lara mesaj göndermek için kullanýlýr.
//Tüm client'lara mesaj gönderir.
[HttpGet("{teamCount}")]
public async Task<IActionResult> SetTeamCount(int teamCount)
{
    //MyHub.TeamCount = teamCount;

    //Clients.All.SendAsync --bu hub'a baðlý olan tüm client'lara mesajý gönderir.
    await _hubContext.Clients.All.SendAsync("Notify", $"Arkadaþlar takým  {teamCount} kiþi olacaktýr.");

    return Ok();
}

// Client tarafýnda server'dan mesaj almak için kullanýlýr.
connection.on("Notify", teamCount => {
    $("#notify").html(`<div class="alert alert-">${teamCount}</div>`);
});


15. SignalR Server Hub Clients.Caller

Clients.Caller.SendAsync --sadece çaðýran client'a mesaj gönderir.

Client bir istek yaptýðýnda hangi client istek yapmýþsa (o client'ýn metodunu kullanýr)sadece ona mesaj gönderir.

8kiþilik yer var. 9.girerken yer yok mesajýnýn 9.ya mesaj verilmesi


//Clients.Caller --bu hub'a baðlý olan client'a mesajý gönderir.
//ReceiveMessage --client tarafýnda bu isimde bir metot olmalýdýr. bu metot olmazsa mesaj alýnamaz.Subrscribe olmalýlar buna.
//name --client tarafýna gönderilecek olan mesaj. tipi önemli deðil. object olabilir.class olabilir.
await Clients.Caller.SendAsync("ReceiveMessage", "Takým dolu.");

16. SignalR Server Hub Clients.Caller-2

Kullanýcý ilk girdiði anda olan datalarýn gösterilmesi
Veritaýndan gelen datalarýn gösterilmesi
Kullanýcý bir iþlem yaptýðýnda diðer kullanýcýlarýn bu iþlemi görmesi



17. SignalR Server Hub Clients.Group-1

Group olarak client'lara mesaj göndermek için kullanýlýr.
Chat oda mesajlaþmasý.
Bir grup oluþturulur. Gruba client'lar eklenir. Gruba eklenen client'lar arasýnda mesajlaþma yapýlýr.

A ve B takýmý olsun. A ve B takýmýndaki kiþilere mesaj göndermek istesin


18. SignalR Server Hub Clients.Group-2
Clientlarýn gruplara eklenmesi ve gruplardan çýkarýlmasý

22. SignalR Server Strongly typed Hubs

Hub oluþtururken Strongly type -- bir dile objenizi bilmesi demektir.
Ýnterface üzerinden metot isimlerini alýnmasý

IProductHub interface  ve ProductHub classý oluþturuyoruz.
ReceiveProduct metodunu kendimiz vermeden ismini algýlamakta.

 public class ProductHub : Hub<IProductHub>
 {
     public async Task SendProduct(Product product)
     {
         await Clients.All.ReceiveProduct(product);
     }
 }


23. SignalR Server Hub (Asp.Net Core Mvc)

SignalR Server uygulamasýný Asp.Net Core Mvc projesine nasýl ekleyebiliriz ?


33. Hub nedir?

Hub --Client ile Server arasýnda ileþimi kuran
    --Client'ýn Server'daki Server'ýn Client'daki bir metodunu çaðýrmaya saðlayan ana yapý.





SignalR nedir ?

SignalR, web uygulamalarýna, WebSocket teknolojisini kulllanarak Real Time fonksiyonellik kazandýran bir Open Source kütüphanedir.
Uygulamarýmýza realtime özellik kazandýran bir opensource kütüphanedir.

Özünde RPC(Remote Procedure Call) mekanizmasýný benimsemektedir. RPC sayesinde server,
client!ta bulunan herhangi bir metodun tetiklenmesini ve veri transferini saðlayabilmektedir.

gRPC Protokolü:

Hub özünde bir class'týr ve içerisinde tanýmlanana bir metoda subscribe olan tüm client!lar ilgili Hub üzerinden iletilen mesajlarý alacaktýr.


withAutomaticReconnect -- Baðlantý var ama koptuðu durumlarda connection kurmaya çalýþýr.
onreconnecting         -- Yeniden baðlanma giriþimlerini baþlatmadan önce fýrlatýlan/tetiklenen event.
onreconnected          -- Yeniden baðlantý gerçekleþtiðinde tetiklenen fonksiyondur.
onclose                -- Yeniden baðlantý giriþimlerinin sonuçsuz kaldýðý durumda fýrlatýlýr.

ConnectionID -- Sistemdeki birden fazla baðlantýsý olan Client'larý birbirinden ayýrtetmek için kullanýlan bir numaradýr.
             -- Hub'a baðlantý gerçekleþtiren Client'lara sþsten tarafýndan verilen, unique tekil bir deðerdir.
             -- Amacý Client'larý birbirinden ayýrmaktýr.

